#!/bin/bash

function today () {
  # Load user preferences
  [ -f ~/.todayrc ] && . ~/.todayrc

  # defaults
  TODAYROOT=${TODAYROOT:-~/today}
  DATEFORMAT=${DATEFORMAT:-%Y-%m-%d}
  NOTESUFFIX=${NOTESUFFIX:-.md}

  export TODAYDIR="$TODAYROOT"/`date +"$DATEFORMAT"`
  [ -e "$TODAYDIR" ] || mkdir -p "$TODAYDIR"

  case $1 in
    cd|dir)
      cd "$TODAYDIR"
      ;;
    help)
cat << EOF
Usage:
  today
    Create today directory and nothing else
  today cd
    Change directory to today's directory (only works when sourced as function)
  today note
    Write or amend today's notes.
EOF
      ;;
    last)
      local daysago tocheck founddir
      for daysago in {1..365}; do
        if date --version >/dev/null 2>&1 ; then
          tocheck=`date -d "${daysago} days ago" +"${DATEFORMAT}"`
        else
          tocheck=`date -v "-${daysago}d" +"${DATEFORMAT}"`
        fi
        if [ -n "$tocheck" ] && [ -d "${TODAYROOT}/${tocheck}" ]; then
          echo "${TODAYROOT}/${tocheck}"
          return 0
        fi
      done
      return 1
      ;;
    link)
      local lastdir=`today last`
      if [ -z "$lastdir" ]; then
        echo 'Unable to find last dir to link' >&2
        return 1
      fi
      if ! rmdir "$TODAYDIR"; then
        echo "Unable to remove today dir (${TODAYDIR}) for symlinking" >&2
        return 1
      fi
      if ! echo "$lastdir" | fgrep -q -- "$TODAYROOT"; then
        echo "Last dir does not contain ${TODAYROOT} - cannot continue" >&2
        return 1
      fi
      # Make a relative link
      local withoutroot=`echo "${lastdir:${#TODAYROOT}}" | sed 's@^/*@@'`
      local relativepath="$withoutroot"
      for slash in `fgrep -o / <<< ${withoutroot}`; do
        relativepath="../${relativepath}"
      done
      if ! ln -s "$relativepath" "$TODAYDIR"; then
        echo "Unable to make symlink (ln -s \"relativepath\" \"$TODAYDIR\")" >&2
        return 1
      fi
      echo "$TODAYDIR"
      ;;
    notes|note)
      NOTEFILE="${TODAYDIR}/notes${NOTESUFFIX}"
      "${EDITOR:-vim}" "$NOTEFILE"
      RETVAL=$?
      if [ $RETVAL -ne 0 ]; then
        echo "Failed to write note file (${NOTEFILE}): exit code ${RETVAL}" >&2
      fi
      if [ -f "$NOTEFILE" ]; then
        echo "$NOTEFILE"
      else
        echo "Note file not saved" >&2
      fi
      return $RETVAL
      ;;
    open)
      if which xdg-open >/dev/null 2>&1 ; then # x-desktop group
        xdg-open "$TODAYDIR"
      elif which open >/dev/null 2>&1 ; then # Mac
        open "$TODAYDIR"
      else
        echo "No open command available on this platform!" >&2
        return 1
      fi
      ;;
    *)
      echo "$TODAYDIR"
      ;;
  esac
}

case $(basename -- $0) in
  today)
    today "$@"
    exit $?
    ;;
  today-*)
    today ${0##*today-} "$@"
    exit $?
    ;;
  *)
    #sourced, do nothing
    ;;
esac
